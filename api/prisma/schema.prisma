generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int            @id @default(autoincrement())
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now()) @db.Timestamptz(3)
  email         String         @unique
  name          String
  password      String
  type          Int
  institutionId Int?
  institution   Institutions?   @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  UserSubject   UserSubjects[]
  UserTask      UserTasks[]
}

model Institutions {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  name      String
  User      Users[]
  Subject   Subjects[]
}

model Subjects {
  id            Int            @id @default(autoincrement())
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now()) @db.Timestamptz(3)
  institutionId Int
  institution   Institutions @relation(fields: [institutionId], references: [id])
  name          String
  icon          String?
  color         String?
  UserSubject   UserSubjects[]
  Task          Tasks[]
}

model UserSubjects {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  userId    Int
  user      Users     @relation(fields: [userId], references: [id])
  subjectId Int
  subject   Subjects @relation(fields: [subjectId], references: [id])
}

model Tasks {
  id          Int        @id @default(autoincrement())
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  periodStart DateTime
  periodEnd   DateTime
  subjectId   Int
  subject     Subjects   @relation(fields: [subjectId], references: [id])
  UserTask    UserTasks[]
  questions    Questions[]
}

model UserTasks {
  id               Int                @id @default(autoincrement())
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now()) @db.Timestamptz(3)
  taskId           Int
  task             Tasks              @relation(fields: [taskId], references: [id])
  userId           Int
  user             Users              @relation(fields: [userId], references: [id])
  score            Int
  UserTaskQuestion UserTaskQuestions[]
  status           Int
}

model Questions {
  id                  Int                   @id @default(autoincrement())
  active              Boolean               @default(true)
  createdAt           DateTime              @default(now()) @db.Timestamptz(3)
  title               String
  taskId              Int
  task                Tasks                 @relation(fields: [taskId], references: [id])
  level               Int
  alternative1        String
  alternative2        String
  alternative3        String
  alternative4        String
  correctAlternative  Int
  UserTaskQuestion    UserTaskQuestions[]
}

model UserTaskQuestions {
  id            Int                 @id @default(autoincrement())
  active        Boolean             @default(true)
  createdAt     DateTime            @default(now()) @db.Timestamptz(3)
  questionId    Int
  question      Questions           @relation(fields: [questionId], references: [id])
  alternative   Int
  userTaskId    Int
  userTask      UserTasks           @relation(fields: [userTaskId], references: [id])
  startedAt     DateTime?            @db.Timestamptz(3)
  finishedAt    DateTime?           @db.Timestamptz(3)
  focusOut      Int                 @default(0)
}

model GptQuestions {
  id                  Int                   @id @default(autoincrement())
  active              Boolean               @default(true)
  createdAt           DateTime              @default(now()) @db.Timestamptz(3)
  title               String
  level               Int
  alternative1        String
  alternative2        String
  alternative3        String
  alternative4        String
  correctAlternative  Int
}